<configuration>
  <system.webServer>
    <!-- Removed defaultDocument pointing at server.js to prevent IIS from issuing an initial direct
      request to /server.js which can surface as a transient 500.1001 during cold start or zip
      extraction. Root path is redirected to /pitch/ by the RootToPitch rule below. -->

    <!-- Ensure IIS does not replace app JSON/HTML responses with its own error pages so we can
      see Express / iisnode output in log stream and client. -->
    <httpErrors existingResponse="PassThrough" />
    
    <handlers>
      <!-- Host Express directly via server.js -->
      <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
    </handlers>

    <!-- Optional: explicit MIME types (harmless even if already present) -->
    <staticContent>
      <mimeMap fileExtension=".js" mimeType="application/javascript" />
      <mimeMap fileExtension=".mjs" mimeType="application/javascript" />
      <mimeMap fileExtension=".json" mimeType="application/json" />
      <mimeMap fileExtension=".css" mimeType="text/css" />
      <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
      <mimeMap fileExtension=".woff" mimeType="font/woff" />
      <mimeMap fileExtension=".woff2" mimeType="font/woff2" />
    </staticContent>

    <rewrite>
      <rules>
        <!-- 1) Health check and API routes go to Node first -->
        <rule name="HealthAndApiToNode" stopProcessing="true">
          <match url="^(health|api)(/.*)?$" />
          <action type="Rewrite" url="server.js" />
        </rule>

        <!-- Block direct browsing to server.js (should only be executed via rewrite). This avoids
             noisy monitoring tools or accidental hits triggering iisnode 500s if startup is still
             in progress. -->
        <rule name="BlockDirectServerJs" stopProcessing="true">
          <match url="^server\.js$" />
          <action type="CustomResponse" statusCode="404" statusReason="Not Found" statusDescription="File not served directly" />
        </rule>

        <!-- 1b) Test routes go to Node -->
        <rule name="TestRoutesToNode" stopProcessing="true">
          <match url="^(test|simple-test)(/.*)?$" />
          <action type="Rewrite" url="server.js" />
        </rule>

        <!-- 2) Root redirect to pitch -->
        <rule name="RootToPitch" stopProcessing="true">
          <match url="^$" />
          <action type="Redirect" url="/pitch/" />
        </rule>

        <!-- 3) Serve real files from their physical path -->
        <rule name="ServeStatic" stopProcessing="true">
          <match url="(.*)" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" />
          </conditions>
          <action type="None" />
        </rule>

        <!-- 4) Requests for assets (/*.js, /assets/*, etc.) should come from client/dist -->
        <rule name="StaticFromClientDist" stopProcessing="true">
          <match url="(.*)" />
          <conditions>
            <add input="{REQUEST_URI}" pattern="^/(assets/.*|.*\.(js|mjs|css|map|png|jpg|jpeg|gif|svg|ico|webp|woff|woff2|ttf))$" />
          </conditions>
          <action type="Rewrite" url="client/dist{REQUEST_URI}" />
        </rule>

        <!-- 5) Pitch routes go to Node for SSR/prefill injection -->
        <rule name="PitchToNode" stopProcessing="true">
          <match url="^pitch(/.*)?$" />
          <action type="Rewrite" url="server.js" />
        </rule>

        <!-- 6) Everything else -> SPA index.html -->
        <rule name="SpaFallback" stopProcessing="true">
          <match url=".*" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_URI}" pattern="^/(health|api|pitch|test|simple-test)(/|$)" negate="true" />
          </conditions>
          <action type="Rewrite" url="client/dist/index.html" />
        </rule>
      </rules>
    </rewrite>
    <!-- iisnode diagnostics: disable file-based logging/devErrors to avoid
      cases where iisnode cannot create per-process log files due to permissions.
      Disable these so stdout/stderr is captured by App Service log-stream instead.
      Toggle back to true only temporarily when running as admin or with ensured
      write permissions to the app folder. -->
    <!--
      Disable iisnode's file based logging and dev error pages. When these are
      enabled iisnode attempts to create log files under the application
      directory which often fails in Azure App Service due to permission
      restrictions. The failure results in a cryptic 500.1001 error with no
      output in the log stream. By keeping logging disabled iisnode forwards
      stdout/stderr to the platform log stream instead.
    -->
    <iisnode 
      loggingEnabled="false" 
      devErrorsEnabled="false"
      node_env="production"
      nodeProcessCountPerApplication="1"
      maxConcurrentRequestsPerProcess="1024"
      maxNamedPipeConnectionRetry="3"
      namedPipeConnectionRetryDelay="2000"
      asyncCompletionThreadCount="0"
      initialRequestBufferSize="4096"
      maxRequestBufferSize="65536"
      watchedFiles="*.js"
      enableXFF="true"
    />
  </system.webServer>
</configuration>
